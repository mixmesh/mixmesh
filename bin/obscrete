#!/bin/sh

usage()
{
    >&2 echo "obscrete --help | -h"
    >&2 echo "    Display available options"
    >&2 echo "obscrete [--simulator] [--config <CONFIG-FILE>] [--]"
    >&2 echo "    Start Obscrete (put erl options after --)"
    >&2 echo "obscrete --reload [--control-address <IP-ADDRESS>] [--control-port <PORT>]"
    >&2 echo "    Reload Obscrete"
    >&2 echo "obscrete --stop [--control-address <IP-ADDRESS>] [--control-port <PORT>]"
    >&2 echo "    Stop Obscrete"
    >&2 echo "obscrete --digest-password <PASSWORD>"
    >&2 echo "    Digest a password"
    >&2 echo "obscrete --elgamal-keys <PIN> <PIN-SALT> <NYM>"
    >&2 echo "    Generate a new ElGamal public/secret key pair"
    >&2 echo "obscrete --pin-salt"
    >&2 echo "    Generate a new PIN salt"
    >&2 echo "obscrete --self-signed-ssl-cert"
    >&2 echo "    Generate a self-signed SSL certificate"
    exit 100
}

erl=`which erl`
if [ -z "${erl}" ]; then
    >&2 echo "Could not find erl in path!"
    exit 1
fi

bin_dir=${0%/*}
erl_libs=${bin_dir}/../..
pa="-pa ${erl_libs}/*/test"
perform="-eval obscrete:start()"
simulator=0

while :; do
    case $1 in
        --help | -h)
            usage
            ;;
        --config)
            if [ $# -lt 2 ]; then
                usage
            fi
            config="--config $2"
            shift
            ;;
        --reload)
            shell="-noinput"
            perform="-run obscrete_config_serv reload"
            break
            ;;
        --control-address)
            if [ $# -lt 2 ]; then
                usage
            fi
            control_address="--control-address $2"
            shift
            ;;
        --control-port)
            if [ $# -lt 2 ]; then
                usage
            fi
            control_port="--control-port $2"
            shift
            ;;
        --stop)
            shell="-noinput"
            perform="-run obscrete_config_serv stop"
            break
            ;;
        --digest-password)
            if [ $# -ne 2 ]; then
                usage
            fi
            shell="-noinput"
            perform="-run obscrete_command digest_password $2"
            shift
            break
            ;;
        --elgamal-keys)
            if [ $# -ne 4 ]; then
                usage
            fi
            shell="-noinput"
            perform="-run obscrete_command elgamal_keys $2 $3 $4"
            shift
            break
            ;;
        --pin-salt)
            if [ $# -ne 1 ]; then
                usage
            fi
            shell="-noinput"
            perform="-run obscrete_command pin_salt"
            shift
            break
            ;;
        --self-signed-ssl-cert)
            if [ $# -ne 1 ]; then
                usage
            fi
            if which openssl > /dev/null; then
                openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -subj "/" -keyout /tmp/key.pem -out /tmp/cert.pem > /dev/null 2>&1
                cat /tmp/key.pem /tmp/cert.pem
                rm -f /tmp/key.pem /tmp/cert.pem
                exit 0
            else
                >&2 echo "OpenSSL must be installed to create a certificate"
                exit 1
            fi
            ;;
	--simulator)
	    simulator=1
            ;;
        --)
            shift
            erl_options=$@
            break
            ;;
        "")
            break
            ;;
        *)
            usage
    esac
    command shift
done

if [ ${simulator} -eq 1 ]; then
    if [ -d ${bin_dir}/../../simulator ]; then
	erl_config="-config ${bin_dir}/simulator.config"
    else
        >&2 echo "no simulator directory found"
	exit 1
    fi
else
    erl_config="-config ${bin_dir}/obscrete.config"
fi

# needed for servator(build release)/epx(simulator) etc
export ERL_LIBS=${erl_libs}:$ERL_LIBS

# uncomment to debug execution or add -x flag :-)
# echo ${erl} ${pa} ${erl_config} ${config} ${shell} ${control_address} ${control_port} ${perform} ${erl_options}

${erl} -sname obscrete@localhost ${pa} ${erl_config} ${config} ${shell} ${control_address} ${control_port} ${perform} ${erl_options}
